<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Github搭建个人博客记录</title>
    <url>/2021/07/17/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>搭建博客的基本思路是先在本地创建，然后在再部署到远端。其中在本地创建时，使用Node.js + Hexo，远端部署，这里使用GitHub。最后再利用比较流行的主题Next对个人博客进行美化，便于自己使用。</p>
<h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><ul>
<li>Hexo依赖于Node.js，下载地址为<a href="https://nodejs.org/en/download/">Download | Node.js</a>，不过win10默认已经安装了，可以先在命令行输入： node -V和 npm -V，如果已经安装成功，则该步骤可以跳过。node和npm就是安装Hexo的基础环境。</li>
</ul>
<h3 id="二、Hexo博客搭建"><a href="#二、Hexo博客搭建" class="headerlink" title="二、Hexo博客搭建"></a>二、Hexo博客搭建</h3><ul>
<li><p>在D盘创建blog文件夹，然后在该文件夹下面运行：<code>npm install -g hexo-cli </code>即完成了Hexo的安装；</p>
</li>
<li><p>在D:\blog下面运行：<code>hexo init blog</code>，完成本地博客的初始化；</p>
</li>
<li><p>运行以下命令，并在浏览器输入<code>localhost:4000</code>即可看到最简单的博客</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g    # 生成博客</span><br><span class="line">hexo s    # 在服务端显示</span><br></pre></td></tr></table></figure></li>
<li><p>到此为止，本地博客最简单的版本就算搭建完成了，此时会在blog文件下面生成一系列文件，主要文件有以下几个：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blog/_config.yml            # 站点配置文件，和后面同名的主题配置文件区分</span><br><span class="line">blog/source/_posts/*.md     # 生成博客的Markdown文件</span><br><span class="line">blog/themes                 # 主题文件夹，后面会介绍，可以更换并配置主题</span><br></pre></td></tr></table></figure></li>
<li><p>另外，hexo常见的操作如下：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"># 上述命令基本上一次性使用</span><br><span class="line"># 下面四条最常用</span><br><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br></pre></td></tr></table></figure>
<h3 id="三、Hexo-Github线上运行"><a href="#三、Hexo-Github线上运行" class="headerlink" title="三、Hexo+Github线上运行"></a>三、Hexo+Github线上运行</h3></li>
<li><p>我们搭建博客的目的肯定不是为了只在本地运行，所以需要通过一定的技术手段将博客上传到远端。具体操作时，可以花钱购买域名，也可以使用免费的版本，这里我使用了常见的GitHub作为远端服务器。</p>
</li>
<li><p>在这里多说一句，GitHub在国内有时候访问速度很不理想，比如我们实验室，平时下载东西的速度能到30Mb/s，但是访问GitHub有时候就很慢，所以推荐大家购买一个靠谱的vpn并且对GitHub的访问进行合理配置，科学上网。我经常使用的vpn是<a href="https://www.myunlu.com/signin">myunlu</a>，整体使用下来还是很稳定的，我的邀请码是 5A9334B8EA51BAC53A2F8561FB156427。最后在命令行配置GitHub代理即可。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<p>接下来就是正式的操作：</p>
</li>
<li><p><strong>创建GitHub仓库</strong>，仓库名一定是<strong>username.github.io</strong></p>
</li>
<li><p><strong>安装git</strong>：win下直接下载客户端就行，其他系统同理，安装完成之后，在git bash中执行以下命令：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">2. git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">3. ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">4. 复制生成的id_rsa.pub中的密匙，然后到GitHub-&gt;Setting-&gt;new SSH Key中配置</span><br><span class="line">5. ssh git@github.com   # Hi, ***! You&#x27;ve successfully authenticated, but*** 说明成功了</span><br></pre></td></tr></table></figure>
<p>  上面的一通操作只要知道其目的就行，实质就是通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
</li>
<li><p><strong>安装git和Hexo联合部署工具</strong>：这个可以理解成GitHub对hexo的一个插件，这样使用简单的hexo命令，就可以完成GitHub部署了，该插件的安装命令为： <code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p><strong>修改站点配置文件blog/_config.yam</strong></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: https://github.com/[yourusername]/[yourusername].github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li>
<li><p><strong>部署到远端</strong>：使用以下命令，即可将本地的博客内容部署到远端。自此之后，我们用到的命令就是下面的几条命令以及<a href="https://zhanghengsjtu.github.io/2021/07/17/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/">Markdown语法</a>。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  # 清理</span><br><span class="line">hexo g      # 生成</span><br><span class="line">hexo s      # 本地端口4000预览</span><br><span class="line">hexo d      # 推到远端，所以需要上面GitHub关联，和git+hexo联合部署工具</span><br></pre></td></tr></table></figure>
<h3 id="四、Next主题配置"><a href="#四、Next主题配置" class="headerlink" title="四、Next主题配置"></a>四、Next主题配置</h3></li>
<li><p>上述三部分的功能是核心，保证了我们能够搭建最基础的博客，但是默认生成的博客页面大家可能不喜欢，在这里推荐使用比较常见的一个注意<a href="https://github.com/theme-next/hexo-theme-next">Next</a>，之所以推荐这个主题，和我当初选择Hexo的原因很类似，选择一个成熟好用的框架，这样有问题之后方便交流，毕竟我们的目的不是深入研究网页开发。</p>
</li>
<li><p><strong>下载Next主题</strong>： 在上述blog目录下，使用命令行运行<br><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>即可将next主题下载到blog/themes/next下面，其中最重要的文件为blog/themes/next/_config.yam，我们把这个文件叫<em>主题配置文件</em>，注意和上面的<em>站点配置文件</em>的区别。</p>
</li>
<li><p><strong>Next主题定制</strong><br>接下来就是根据个人喜好定制Next主题了，在这里推荐两个比较好的博客<a href="https://blog.mrzorg.top/Hexo/2020-02-12-hero-next-theme-settings/">链接1</a>，<a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/">链接2</a>，比较有用的操作主要有以下几个：</p>
<ul>
<li>修改基本信息</li>
<li>修改头像</li>
<li>修改语言</li>
</ul>
</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="https://blog.mrzorg.top/Hexo/2020-02-12-hero-next-theme-settings/">https://blog.mrzorg.top/Hexo/2020-02-12-hero-next-theme-settings/</a></li>
<li><a href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/">http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/</a></li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法学习</title>
    <url>/2021/07/17/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="一、为什么选择Markdown"><a href="#一、为什么选择Markdown" class="headerlink" title="一、为什么选择Markdown"></a>一、为什么选择Markdown</h3><p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>相比于印象笔记，有道云笔记和Word，Markdown的功能可以说是“大打折扣”，但是正式因为这种简介的语言格式，让我们能够更加回归内容本身，而不是去关注字体，颜色，排版等琐碎的细节。同时Markdown还有一个好处是很多网站都支持Markdown预览，非常方便。</p>
<p>Markdown的编辑器比较多，选择自己喜欢的即可，在这里我选择使用VSCode+Markdown插件，当然Typora也是非常好用的编辑器。不过还是刚刚讲的，使用Markdown是回归内容本身，选择自己用着顺手的编辑器即可。</p>
<h3 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h3><p>语法主要包含以下几个方面：</p>
<ol>
<li><strong>标题</strong>：使用多个#表示不同的标题级别；</li>
<li><strong>列表</strong>：<ul>
<li>无序列表：使用-+*表示；</li>
<li>有序列表：使用1，2，3表示；</li>
<li>列表分级：上下级之间用三个空格；</li>
</ul>
</li>
<li><strong>字体</strong>：语法如下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***斜体加粗***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>
结果如下：<br> <em>斜体</em><br> <strong>粗体</strong><br> <em><strong>斜体加粗</strong></em><br> <del>删除线</del></li>
<li><strong>超链接</strong>：形式为 <code>[超链接名](超链接地址 &quot;超链接title&quot;)</code>，如<code>[个人博客]（https://zhanghengsjtu.github.io/）</code></li>
<li><strong>代码</strong><ul>
<li>单行代码：左右各一个反引号`</li>
<li>代码块：左右各三个反引号`，且两边的三个反引号独占一行</li>
</ul>
</li>
<li><strong>图片和图床</strong>：基础语法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图注](图片地址 &#x27;&#x27;悬浮标题&#x27;&#x27;)</span><br><span class="line">图注就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">悬浮标题是图片的标题，当鼠标移到图片上时显示的内容。悬浮标题可加可不加</span><br></pre></td></tr></table></figure>
比如<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![NBA全明星](https://raw.githubusercontent.com/zhanghengsjtu/figureBed/main/img/20210717215222.png &quot;NBA全明星&quot;)</span><br></pre></td></tr></table></figure>
效果如下<br><img src="https://raw.githubusercontent.com/zhanghengsjtu/figureBed/main/img/20210717215222.png" alt="NBA全明星" title="NBA全明星"><br>需要注意的是，为了保证多平台统一，图片存储时需要使用图床，提供统一的外部链接<br><strong>GitHub+Picgo搭建图床主要步骤如下：</strong><ul>
<li>建立GitHub图片仓库</li>
<li>创建并获取token</li>
<li>下载Picgo客户端</li>
<li>配置客户端</li>
</ul>
</li>
<li><strong>分割线</strong>：三个或者三个以上的-*都可以</li>
<li><strong>引用</strong>：在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;</li>
<li><strong>表格</strong>： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>
 效果如下：<table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到这里，我的个人博客和对Markdown语法的了解初步完成了。Markdown语法比较简单，唯一比较麻烦一些的可能就是图床的制作，相信只要大家耐心一些，肯定能够完成的。下一篇记录一下Hexo+GitHub搭建个人博客的过程。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li><a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/69210764">https://zhuanlan.zhihu.com/p/69210764</a></li>
<li><a href="https://www.jianshu.com/p/ea1eb11db63f">https://www.jianshu.com/p/ea1eb11db63f</a></li>
<li><a href="https://www.cnblogs.com/ly-2019/p/11828790.html">https://www.cnblogs.com/ly-2019/p/11828790.html</a></li>
<li><a href="https://blog.csdn.net/yefcion/article/details/88412025">https://blog.csdn.net/yefcion/article/details/88412025</a></li>
</ol>
]]></content>
      <tags>
        <tag>技术</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
